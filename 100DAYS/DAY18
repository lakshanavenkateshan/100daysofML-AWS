CI/CD for ML app with GitHub Actions + AWS

Step 1 — Create requirements.txt (LOCAL)
flask
joblib
scikit-learn
numpy


Update Dockerfile:

FROM python:3.10-slim
WORKDIR /app
COPY app.py titanic_rf_model.pkl requirements.txt /app/
RUN pip install --no-cache-dir -r requirements.txt
EXPOSE 5000
CMD ["python","app.py"]

Step 2 — Create IAM User for CI/CD (AWS Console)
Go to IAM → Users → Add User
Name: github-actions
Programmatic access
Attach policy:
AmazonEC2FullAccess
AmazonECRFullAccess
Save Access Key ID & Secret Access Key (you’ll need them for GitHub secrets).

Step 3 — Add GitHub Secrets (GitHub repo → Settings → Secrets → Actions)
Add:
AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY
AWS_REGION (e.g., ap-south-1)
AWS_ACCOUNT_ID
EC2_HOST (your EC2 public IP or DNS)
EC2_USER (usually ubuntu)
EC2_KEY (private SSH key content, copy from your .pem file and paste here)

Step 4 — GitHub Actions Workflow (.github/workflows/deploy.yml):
Create this file:
name: Deploy Titanic ML App

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
        | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build Docker image
      run: |
        docker build -t titanic-flask-app .

    - name: Tag Docker image
      run: |
        docker tag titanic-flask-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/titanic-flask-app:latest

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/titanic-flask-app:latest

    - name: Deploy on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/titanic-flask-app:latest
          docker stop titanic || true
          docker rm titanic || true
          docker run -d --name titanic -p 5000:5000 --restart unless-stopped ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/titanic-flask-app:latest


Step 5 — Test CI/CD
Push your code to GitHub main.
GitHub Actions will trigger → build → push image → redeploy EC2.
Wait for workflow success ✅.
Test:
curl -X POST http://<ec2-ip>:5000/predict \
-H "Content-Type: application/json" \
-d '{"features":[3,1,22,0,0,7.25]}'
